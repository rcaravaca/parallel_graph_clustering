#ifndef DIGIT_H
#define DIGIT_H

#include <string>
#include <vector>

/**
 * @brief Class representing a "digit" with row, column, energy, and ID.
 * 
 * This class encapsulates the properties of a digit in a grid, including
 * its row, column, energy, and a generated ID based on the row and column.
 */
class Digit {
private:
    int row;     ///< Row index of the digit
    int col;     ///< Column index of the digit
    int energy;  ///< Energy value of the digit
    // std::string ID;  ///< ID generated by concatenating row and col
    int ID;

    /**
     * @brief Private method to build the ID by concatenating row and col.
     * 
     * This method generates a string ID by converting the `row` and `col` 
     * values to strings and concatenating them with a separator.
     */
    void buildID();

public:
    /**
     * @brief Constructor for the Digit class.
     * 
     * Initializes the digit with the provided row, column, and energy values.
     * Automatically generates an ID based on the row and column.
     * 
     * @param r The row value.
     * @param c The column value.
     * @param e The energy value.
     */
    Digit(int r, int c, int e);

    /**
     * @brief Getter for the row value.
     * 
     * @return The row index of the digit.
     */
    int getRow() const;

    /**
     * @brief Getter for the column value.
     * 
     * @return The column index of the digit.
     */
    int getCol() const;

    /**
     * @brief Getter for the energy value.
     * 
     * @return The energy value of the digit.
     */
    int getEnergy() const;

    /**
     * @brief Getter for the generated ID.
     * 
     * @return The ID of the digit, generated by concatenating row and col.
     */
    int getID() const;

    /**
     * @brief Setter for the row value.
     * 
     * Updates the row and recalculates the ID.
     * 
     * @param r The new row value.
     */
    void setRow(int r);

    /**
     * @brief Setter for the column value.
     * 
     * Updates the column and recalculates the ID.
     * 
     * @param c The new column value.
     */
    void setCol(int c);

    /**
     * @brief Setter for the energy value.
     * 
     * Updates the energy without modifying the ID.
     * 
     * @param e The new energy value.
     */
    void setEnergy(int e);
};

/**
 * @brief Structure to store event information.
 * 
 * Each event contains an event_id and a vector of digits.
 */
struct Event {
    int event_id;              ///< The event ID
    std::vector<Digit> digits; ///< A vector of Digit structures for each event
};

#endif // DIGIT_H